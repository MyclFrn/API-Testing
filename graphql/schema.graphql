"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"Indicates what fields are available at the top level of a query operation."
type Query {
    "Find a single user by an identifying attribute."
    user(
      "Search by primary key."
      id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

      "Search by email address."
      email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    "List multiple users."
    users(
      "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
      name: String @where(operator: "like")
    ): [User!]! @paginate(defaultCount: 10)

    post(
        "Search by primary key."
        id: ID @eq

        title: String @eq
    ): Post @find

    posts(
        title: String @where(operator: "like")
        orderBy: _ @orderBy(columns:["created_at", "title"])
    ): [Post!]! @paginate(defaultCount: 9)

    comment(
        "Search by primary key."
        id: ID @eq

    ): Comment @find

    comments(
        reply: String @where(operator: "like")
    ): [Comment!]! @paginate(defaultCount: 35)

}

"Account of a person who utilizes this application."
type User {
    "Unique primary key."
    id: ID!
    "Non-unique name."
    name: String!
    "Unique email address."
    email: String!
    "When the email was verified."
    email_verified_at: DateTime
    "When the account was created."
    created_at: DateTime!
    "When the account was last updated."
    updated_at: DateTime!

    posts: [Post!]! @hasMany
}

type Post{
    id: ID!
    title: String!
    content: String!
    author: User! @belongsTo
    created_at: DateTime!
    updated_at: DateTime!
    comments: [Comment!]! @hasMany
}

type Comment{
    id: ID!
    reply: String!
    post: Post! @belongsTo
}

type Mutation{
    createPost(author_id:Int!,title: String!,content: String!): Post @create
    createComments(post_id:Int!, reply: String!): Comment @create

    updatePost(id:ID!,author_id:Int,title: String,content: String): Post @update
    updateComment(id:ID!,post_id:Int,reply:String): Comment @update

    deletePost(id:ID!): Post @delete
    deleteComment(id:ID!): Comment @update
}

